# Inspired by and parts taken over from [Cover Control Automation (CCA)](https://github.com/hvorragend/ha-blueprints)

blueprint:
  name: "Cover automation"
  description: "Open, close and shade automatically"
  domain: automation
  homeassistant:
    min_version: "2024.6.0"
  input:
    cover_entity:
      name: "Cover"
      description: "The cover to automate."
      selector:
        entity:
          filter:
            domain: cover

    illuminance_section:
      name: "Brightness Configuration"
      description: "Brightness sensor selection and configuration"
      icon: mdi:brightness-5
      collapsed: true
      input:
        default_brightness_sensor:
          name: "\U0001F505 Default Brightness Sensor"
          description:
            This default brightness sensor can be defined here, which is
            used for daily up and down.
          default: []
          selector:
            entity:
              filter:
                - domain:
                    - sensor
              multiple: false
        brightness_up:
          name: "\U0001F505 Brightness Value For Opening The Cover"
          description: At what brightness value should the cover be opened?
          default: 0
          selector:
            number:
              min: 0.0
              max: 100000.0
              unit_of_measurement: lx
              step: 1.0
              mode: slider
        brightness_down:
          name: "\U0001F505 Brightness Value For Closing The Cover"
          description:
            At what brightness value should the cover be closed? Must be
            lower then the brightness up value.
          default: 0
          selector:
            number:
              min: 0.0
              max: 100000.0
              unit_of_measurement: lx
              step: 1.0
              mode: slider

    position_section:
      name: "Cover Position Settings"
      description: "Control the various positions of the shutter."
      icon: mdi:window-shutter-settings
      collapsed: true
      input:
        position_open:
          name: "\U0001F53C Open Position"
          description: What position should the cover be moved into when opening?
          default: 100
          selector:
            number:
              min: 0.0
              max: 100.0
              unit_of_measurement: "%"
              step: 1.0
              mode: slider

        position_closed:
          name: "\U0001F53B Closed position"
          description: "Cover position to use as 'closed' while ."
          default: 0
          selector:
            number:
              min: 0.0
              max: 100.0
              unit_of_measurement: "%"
              step: 1.0
              mode: slider

        position_closed_temp_threshold:
          name: "\U0001F53B\U0001F321 Temperature threshold for 'Closed position'"
          description: "(Optional) Cover position is used as 'closed' while 'Temperature sensor' is higher than this threshold"
          default: 0
          selector:
            number:
              min: -30
              max: 40

        position_shade:
          name: "\U0001F975 Shade position"
          description: "Cover position to use for shading."
          default: 20
          selector:
            number:
              min: 0.0
              max: 100.0
              unit_of_measurement: "%"
              step: 1.0
              mode: slider

        position_shade_light:
          name: "\U0001F975\U0001F324 Light shade positition"
          description: "Cover position to use for shading when it's not totally sunny."
          default: 50
          selector:
            number:
              min: 0.0
              max: 100.0
              unit_of_measurement: "%"
              step: 1.0
              mode: slider

        position_ventilation:
          name: "\U0001F4A8 Ventilate position"
          description: "Cover position to use for ventilation when the contact is open."
          default: 20
          selector:
            number:
              min: 0.0
              max: 100.0
              unit_of_measurement: "%"
              step: 1.0
              mode: slider

        position_ventilation_night_time:
          name: "\U0001F4A8\U0001F303 Ventilate position for nighttime"
          description: "Cover position to use for ventilation during the night when the contact is open."
          default: 20
          selector:
            number:
              min: 0.0
              max: 100.0
              unit_of_measurement: "%"
              step: 1.0
              mode: slider
    time_section:
      name: Time Control Configuration
      icon: mdi:clock-time-two-outline
      collapsed: true
      input:
        time_up_early:
          name: "\U0001F53C Time For Drive Up - Early On Workdays"
          description:
            "The earliest time at which the cover may be opened. The cover
            will be opened if <ins>AFTER</ins> this time the defined brightness or
            sun-elevation value is high enough. (**NOTE**: A resident must also be
            awake if one is defined)."
          default: 08:00:00
          selector:
            time: {}
        time_up_early_non_workday:
          name: "\U0001F53C Time For Drive Up - Early On Non-Workdays"
          description: As directly above, but for non-workdays.
          default: 08:30:00
          selector:
            time: {}
        time_up_late:
          name: "\U0001F53C Time For Drive Up - Late On Workdays"
          description:
            "The latest time at which the cover should be opened. If the
            required brightness or sun-elevation value has <ins>NOT</ins> yet been
            reached by this time, the cover will still be opened. (**NOTE**: If a
            resident has been defined and the resident is still asleep, then the cover
            will NOT be opened.)"
          default: 09:00:00
          selector:
            time: {}
        time_up_late_non_workday:
          name: "\U0001F53C Time For Drive Up - Late On Non-Workdays"
          description: As directly above, but for non-workdays.
          default: 09:00:00
          selector:
            time: {}
        time_down_early:
          name: "\U0001F53B Time For Drive Down - Early On Workdays"
          description:
            The earliest time at which the cover may be closed. The cover
            will be closed if <ins>AFTER</ins> this time the defined brightness or
            sun-elevation value is low enough.
          default: "16:00:00"
          selector:
            time: {}
        time_down_early_non_workday:
          name: "\U0001F53B Time For Drive Down - Early On Non-Workdays"
          description: As directly above, but for non-workdays.
          default: "16:00:00"
          selector:
            time: {}
        time_down_late:
          name: "\U0001F53B Time For Drive Down - Late On Workdays"
          description:
            The latest time at which the cover should be closed. If the
            required brightness or sun-elevation value has <ins>NOT</ins> yet been
            reached by this time, the cover will still be closed. <br /> Please do
            not enter 0:00, because that would be the next day!
          default: "22:00:00"
          selector:
            time: {}
        time_down_late_non_workday:
          name: "\U0001F53B Time For Drive Down - Late On Non-Workdays"
          description:
            As directly above, but for non-workdays. <br /> Please do not
            enter 0:00, because that would be the next day!
          default: "22:00:00"
          selector:
            time: {}
        workday_sensor:
          name: "\U0001F4BC Sensor For Workday Today"
          description:
            "It may be desired to open a cover at a different time on work
            days than on non-work days. The corresponding binary sensor can be defined
            here. If not set, the cover will open every time at time_up_early. <br
            /><br /> I recommend using the [Workday integration](https://www.home-assistant.io/integrations/workday/).
            <br /><br /> Example: `binary_sensor.workday_today` <br /><br />`Optional`"
          default: []
          selector:
            entity:
              filter:
                - domain:
                    - binary_sensor
              multiple: false
        workday_sensor_tomorrow:
          name: "\U0001F4BC Sensor For Workday Tomorrow (only for closing)"
          description:
            "When <ins>closing</ins> the blinds, you have the option of
            checking the times for tomorrow rather than the current day. This has
            the advantage that you can <ins>close</ins> the blinds earlier if <ins>tomorrow</ins>
            is a working day. This makes sense if, for example, there is school tomorrow
            but today is actually still the weekend. But the child has to go to bed
            earlier.<br /> If this field is not configured here, the normal working
            day sensor is used. <br /><br /> I recommend using the [Workday integration](https://www.home-assistant.io/integrations/workday/).
            <br /><br /> Example: `binary_sensor.workday_tomorrow` <br /><br />`Optional`"
          default: []
          selector:
            entity:
              filter:
                - domain:
                    - binary_sensor
              multiple: false
    sun_section:
      name: "Sun Elevation Settings"
      description: "Sun elevation settings controlling auto-shading"
      icon: mdi:weather-sunny
      collapsed: true
      input:
        default_sun_sensor:
          name: ☀️ Sun Sensor
          description:
            Which sensors provides attributes with current azimuth and
            elevation of sun. I strongly suggest to use sun.sun ([Sun integration](https://www.home-assistant.io/integrations/sun/)).
            Please make sure that the integration is activated and provides the attributes.
            This sensor is also used for sun protection / sunshade control. <br /><br
            /> <ins>A few examples of threshold values:</ins> <ul> <li>+18° Astronomical
            Dusk</li> <li>+12° Nautical Dusk</li> <li>+6° Dusk</li> <li>0° Sunrise/Sunset
            (Default)</li> <li>-6° Civil Dawn</li> <li>-12° Nautical Dawn</li> <li>-18°
            Astronomical Dawn/Night</li> </ul> <br />`Optional` / `Shading`
          default: sun.sun
          selector:
            entity:
              filter:
                - domain:
                    - sun
              multiple: false
        sun_time_duration:
          name: ☀️ Sun Time Duration
          description:
            Defines the time to given sun sensor must be stay above/below
            the thresholds.
          default: 30
          selector:
            number:
              min: 0.0
              max: 600.0
              mode: slider
              step: 1.0
              unit_of_measurement: seconds

        min_elevation:
          name: "Minimum elevation"
          description: "Minimum elevation angle of the sun when shading is necessary."
          default: 0
          selector:
            number:
              min: -180
              max: 180

        max_elevation:
          name: "Maximum elevation"
          description: "Maximum elevation angle of the sun over which shading becomes unnecessary."
          default: 180
          selector:
            number:
              min: -180
              max: 180

    contacts_section:
      name: Contact Sensors for Ventilation
      description:
        "<br /> <center><code>Settings if the feature ‘\U0001F4A8 - Enable
        ventilation mode’ has been activated above.</code></center><br /> <center><code>All
        these settings are optional</code></center><br
        />"
      icon: mdi:door-closed-lock
      collapsed: true
      input:
        contact_sensor:
          name: "\U0001F6AA  Contact Sensor For Open Window / Door"
          description: "(Optional) A contact sensor to trigger a ventilate position if opened  (e.g. door or window sensor)."
          default:
          selector:
            entity:
              filter:
                domain:
                  - binary_sensor
                  - input_boolean
        lockout_protection_options:
          name: "\U0001F4A8 Lockout protection"
          description:
            For the tilted window (or door, of course), you can individually
            specify where a lockout protection should be used.
          default: []
          selector:
            select:
              options:
                - label: "\U0001F6E1️ Lockout protection when closing the cover"
                  value: lockout_protection_closing
                - label: "\U0001F6E1️ Lockout protection when starting the sun shading"
                  value: lockout_protection_shading_start
                - label: "\U0001F6E1️ Lockout protection when the sun shading is ended"
                  value: lockout_protection_shading_end
              multiple: true
              custom_value: false
        contact_delay_trigger:
          name: "\U0001F55B Contact Trigger Delay"
          description:
            How many seconds must the status of the contact sensors be
            valid for the automation to trigger?
          default: 2
          selector:
            number:
              min: 0.0
              max: 10.0
              unit_of_measurement: seconds
              step: 1.0
              mode: slider

    shading_section:
      name: Sun Shading / Sun Protection
      description:
        "<br /> <center><code>Settings if the feature ‘\U0001F975 - Enable
        automatic sun protection / sunshade control’ has been activated above.</code></center><br
        /> <center><code>All these settings are optional / The attributes of default sun sensor (configured above) is used.</code>
        </center><br/>"
      icon: mdi:shield-sun-outline
      collapsed: true
      input:
        light_sensor:
          name: Brightness Sensor For Sun Shading
          default:
          selector:
            entity:
              filter:
                domain: sensor
                device_class: illuminance
        light_threshold:
          name: "\U0001F975 Sun Shading Brightness Start Value"
          description:
            "The minimum brightness value from which shading should start.
            (Must be above the value of brightness end!)"
          default: 35000
          selector:
            number:
              min: 0.0
              max: 100000.0
              unit_of_measurement: lx
              step: 1.0
              mode: slider
        shading_sun_brightness_end:
          name: "\U0001F975 Sun Shading Brightness End Value"
          description:
            The brightness value from which shading is no longer necessary.
            (Must be below the value of brightness start!).
          default: 25000
          selector:
            number:
              min: 0.0
              max: 100000.0
              unit_of_measurement: lx
              step: 1.0
              mode: slider
        light_threshold_cloudy:
          name: "\U0001F975 Sun Shading Brightness Start Cloudy Value"
          description:
            "The minimum brightness value from which shading should start.
            (Must be above the value of brightness end!)"
          default: 27000
          selector:
            number:
              min: 0.0
              max: 100000.0
              unit_of_measurement: lx
              step: 1.0
              mode: slider
        min_azimuth:
          name: "\U0001F975 Sun Shading Azimuth Start Value"
          description: "Minimum azimuth of the sun when shading is necessary."
          default: 0
          selector:
            number:
              min: 0
              max: 360
        max_azimuth:
          name: "\U0001F975 Sun Shading Azimuth End Value"
          description: "Maximum azimuth of the sun over which shading becomes unnecessary."
          default: 360
          selector:
            number:
              min: 0
              max: 360
        temperature_sensor:
          name: "\U0001F975 Sun Shading Temperature Sensor 1 (eg. indoor)"
          description:
            This is the main temperature sensor. (Here, for example, the
            current indoor temperature can be used as a condition).
          default: []
          selector:
            entity:
              filter:
                domain: sensor
                device_class: temperature
        shading_forecast_sensor:
          name: "\U0001F975 Sun Shading (Forecast) Weather Sensor"
          description:
            'This weather sensor (ideally based on a weather integration)
            is used for further temperature comparisons based on the forecast. This
            sensor is also used to compare weather conditions. Leave empty if the
            forecast is not to be used in any case. <p> Select either a weather entity
            (e.g., weather.your_weather_service) or a sensor that provides the forecasted
            daily maximum temperature. </p> <p> **Weather Entity:** If you select
            a weather entity, the maximum temperature will be automatically determined
            from its forecast attributes. This is necessary if your installed weather
            integration does not provide its own sensors for the forecast. </p> <p>
            **Sensor Entity:** If you already have your own sensor for the daily maximum
            temperature (forecast) (e.g., a template sensor), you can specify it directly
            here. This can improve performance and avoid unnecessary queries, as the
            value is read directly from the sensor. Such a sensor is provided, for
            example, by the Pirate Weather integration (sensor.pirateweather_daytime_high_apparent_temperature_0d).
            </p> <details> <summary><code><strong>CLICK HERE:</strong> Further descriptions</code></summary>


            The idea is that it can happen, especially in spring, that the value of
            the <em>Forecast Temperature Value</em> exceeded by strong solar radiation
            and the shading would be started. However, in spring you may not want
            shading, but the solar radiation as a welcome, free heating is desired.
            So you can define via the forecast sensor that shading is only started
            at an expected daily maximum temperature.

            You can also specify an existing sensor if it already provides the forecast
            for the maximum daily temperature. In this case set "Sun Shading Forecast
            Type" to "Do not use a weather forecast, but the current weather attributes".

            </details>'
          default: []
          selector:
            entity:
              filter:
                - domain:
                    - weather
                    - sensor
              multiple: false
        shading_forecast_type:
          name: "\U0001F975 Sun Shading Forecast Type"
          description:
            "Please choose whether you want to use the daily forecast or
            the hourly forecast. <br /> The first array member of the weather forecast
            is always used. This means the current day or the current hour. The weather
            sensor must support weather.get_forecasts which has been introduced with
            HA 2023.9. <br /><br /> You also have the option of <ins>not using</ins>
            the weather <ins>forecast</ins> service here. The current attributes of
            the weather sensor are then used. <br /> This is the successor to the
            old option: <em>Prevent the use of the 'get_forecasts' service</em>"
          default: daily
          selector:
            select:
              options:
                - label: Use the daily weather forecast service
                  value: daily
                - label: Use the hourly weather forecast service
                  value: hourly
                - label: Do not use a weather forecast, but the current weather attributes
                  value: weather_attributes
              custom_value: false
              multiple: false
        shading_weather_conditions:
          name: "\U0001F975 Sun Shading Weather Conditions"
          description:
            "Check the following weather conditions when activating the
            shading. **NOTE**: Forecast sensor needs to be defined"
          default:
            - sunny
            - partlycloudy
            - cloudy
            - clear
          selector:
            select:
              multiple: true
              options:
                - clear-night
                - clear
                - cloudy
                - fog
                - hail
                - lightning
                - lightning-rainy
                - partlycloudy
                - pouring
                - rainy
                - snowy
                - snowy-rainy
                - sunny
                - windy
                - windy-variant
                - exceptional
              custom_value: false

    feature_section:
      name: "Automation Options"
      description: "Core automation configuration"
      icon: mdi:window-shutter-cog
      collapsed: true
      input:
        is_enabled_input:
          name: "Auto on/off"
          description: "Input boolean to act as switch to disable cover automation."
          default:
          selector:
            entity:
              filter:
                domain: input_boolean
        auto_options:
          name: "Automation Options"
          description: "Stuff"
          default: [auto_up_enabled, auto_down_enabled, auto_shading_enabled]
          selector:
            select:
              options:
                - label: "🔼 - Enable generic automatic opening of the day in the morning"
                  value: "auto_up_enabled"
                - label: "🔻 - Enable generic automatic daily closing at the end of the day"
                  value: "auto_down_enabled"
                - label: "💨 - Enable ventilation mode - Sets to ventilation position when contact opened and shutter is at closed position"
                  value: "auto_ventilate_enabled"
                - label: "🥵 - Enable automatic sun protection / sunshade control"
                  value: "auto_shading_enabled"
                - label: "\U0001F505 - Enable brightness control (in addition to daily opening and closing)"
                  value: auto_brightness_enabled
              multiple: true
              custom_value: false
              mode: list

trigger_variables:
  # Input variables for use in conditions, etc.
  auto_options: !input auto_options
  contact_sensor: !input contact_sensor
  cover_entity: !input cover_entity
  default_sun_sensor: !input default_sun_sensor
  default_brightness_sensor: !input default_brightness_sensor
  is_brightness_enabled: '{{ ''auto_brightness_enabled'' in auto_options }}'
  is_up_enabled: "{{ 'auto_up_enabled' in auto_options }}"
  is_down_enabled: "{{ 'auto_down_enabled' in auto_options }}"
  is_ventilation_enabled: "{{ 'auto_ventilate_enabled' in auto_options }}"
  is_shading_enabled: "{{ 'auto_shading_enabled' in auto_options }}"
  light_sensor: !input light_sensor
  shading_azimuth_start: !input min_azimuth
  shading_azimuth_end: !input max_azimuth
  shading_elevation_min: !input min_elevation
  shading_elevation_max: !input max_elevation
  shading_sun_brightness_start: !input light_threshold
  shading_sun_brightness_end: !input shading_sun_brightness_end
  shading_sun_brightness_start_cloudy: !input light_threshold_cloudy
  shading_forecast_sensor: !input shading_forecast_sensor
  shading_forecast_type: !input shading_forecast_type
  shading_weather_conditions: !input shading_weather_conditions
  temperature_sensor: !input temperature_sensor
  time_up_early: !input time_up_early
  time_up_early_non_workday: !input time_up_early_non_workday
  time_up_late: !input time_up_late
  time_up_late_non_workday: !input time_up_late_non_workday
  time_down_early: !input time_down_early
  time_down_early_non_workday: !input time_down_early_non_workday
  time_down_late: !input time_down_late
  time_down_late_non_workday: !input time_down_late_non_workday
  workday_sensor_today: !input workday_sensor
  workday_sensor_tomorrow: !input workday_sensor_tomorrow

  # Variables for use in conditions, based on input
  is_contact_sensor_defined: "{{ contact_sensor != none and contact_sensor != [] }}"
  is_trigger_contact_opened_off_enabled: "{{ is_ventilation_enabled and is_contact_sensor_defined }}"
  is_trigger_contact_opened_on_enabled: "{{ is_ventilation_enabled and is_contact_sensor_defined }}"

triggers:
  - trigger: time_pattern
    minutes: /5

  - trigger: state
    entity_id:
      - !input is_enabled_input

  - trigger: template
    value_template: "{{ is_trigger_contact_opened_off_enabled and is_state(contact_sensor, ['false', 'off']) }}"
    id: "tid_contact_opened_off"
    for:
      seconds: !input contact_delay_trigger
  - trigger: template
    value_template: "{{ is_trigger_contact_opened_on_enabled and is_state(contact_sensor, ['true', 'on']) }}"
    id: "tid_contact_opened_on"
    for:
      seconds: !input contact_delay_trigger
  - trigger: template
    value_template: >-
      {{
        state_attr(default_sun_sensor, 'azimuth') | float(default=shading_azimuth_start) > shading_azimuth_start and
        state_attr(default_sun_sensor, 'azimuth') | float(default=shading_azimuth_end) < shading_azimuth_end and
        state_attr(default_sun_sensor, 'elevation') | float(default=shading_elevation_min) > shading_elevation_min and
        state_attr(default_sun_sensor, 'elevation') | float(default=shading_elevation_max) < shading_elevation_max
      }}
    enabled: "{{ is_shading_enabled and default_sun_sensor != [] }}"
    id: t_shading_start_pending_1
  - trigger: template
    value_template: "{{ light_sensor != none and light_sensor != [] and states(light_sensor) | float(default=shading_sun_brightness_start) > shading_sun_brightness_start }}"
    enabled: "{{ is_shading_enabled and light_sensor != [] }}"
    id: t_shading_start_pending_2

  - trigger: template
    value_template: "{{ light_sensor != none and light_sensor != [] and states(light_sensor) | float(default=shading_sun_brightness_end) < shading_sun_brightness_end }}"
    enabled: "{{ is_shading_enabled and light_sensor != [] }}"
    id: t_shading_end_pending_2
  - trigger: template
    value_template: "{{ state_attr(default_sun_sensor, 'azimuth') | float(default=shading_azimuth_end) > shading_azimuth_end }}"
    enabled: "{{ is_shading_enabled and default_sun_sensor != [] }}"
    id: t_shading_end_pending_5

variables:
  # Input variables for use in conditions, etc.
  brightness_up: !input brightness_up
  brightness_down: !input brightness_down
  contact_sensor: !input contact_sensor
  cover_entity: !input cover_entity
  cover_entities: "{{ expand(cover_entity) | map(attribute='entity_id') | list }}"
  default_sun_sensor: !input default_sun_sensor
  default_brightness_sensor: !input default_brightness_sensor
  light_sensor: !input light_sensor
  lockout_protection_options: !input lockout_protection_options
  lockout_protection_when_closing: "{{ 'lockout_protection_closing' in lockout_protection_options }}"
  lockout_protection_when_shading_starts: "{{ 'lockout_protection_shading_start' in lockout_protection_options }}"
  shading_azimuth_start: !input min_azimuth
  shading_azimuth_end: !input max_azimuth
  shading_elevation_min: !input min_elevation
  shading_elevation_max: !input max_elevation
  shading_sun_brightness_start: !input light_threshold
  shading_sun_brightness_end: !input shading_sun_brightness_end
  shading_sun_brightness_start_cloudy: !input light_threshold_cloudy
  temperature_sensor: !input temperature_sensor
  time_up_early: !input time_up_early
  time_up_early_non_workday: !input time_up_early_non_workday
  time_up_late: !input time_up_late
  time_up_late_non_workday: !input time_up_late_non_workday
  time_down_early: !input time_down_early
  time_down_early_non_workday: !input time_down_early_non_workday
  time_down_late: !input time_down_late
  time_down_late_non_workday: !input time_down_late_non_workday
  position_open: !input position_open
  position_closed: !input position_closed
  position_shade_light: !input position_shade_light
  position_shade: !input position_shade
  position_ventilation: !input position_ventilation
  position_ventilation_night_time: !input position_ventilation_night_time

  # Variables for use in conditions, based on input
  is_contact_sensor_defined: "{{ contact_sensor != none and contact_sensor != [] }}"
  is_default_brightness_sensor_defined: "{{ default_brightness_sensor != none and default_brightness_sensor != [] }}"
  is_shading_brightness_sensor_defined: "{{ light_sensor != none and light_sensor != [] }}"
  is_temperature_sensor_defined: "{{ temperature_sensor!= none and temperature_sensor != [] }}"
  is_temperature_sensor_available: "{{ is_temperature_sensor_defined and not is_state(temperature_sensor, ['false', 'off', 'unknown', 'unavailable']) }}"
  is_contact_sensor_open: "{{ is_state(contact_sensor, ['on']) if is_contact_sensor_defined else False }}"
  is_today_off: "{{ workday_sensor_today != [] and is_state(workday_sensor_today, 'off') }}"
  is_tomorrow_off: "{{ workday_sensor_tomorrow != [] and is_state(workday_sensor_tomorrow, 'off') }}"
  is_tomorrow_on: "{{ workday_sensor_tomorrow != [] and is_state(workday_sensor_tomorrow, 'on') }}"
  time_up_early_today: "{{ time_up_early_non_workday if is_today_off else time_up_early }}"
  time_up_late_today: "{{ time_up_late_non_workday if is_today_off else time_up_late }}"
  time_down_early_today: "{{ time_down_early_non_workday if is_tomorrow_off else time_down_early if is_tomorrow_on else time_down_early_non_workday if is_today_off else time_down_early }}"
  time_down_late_today: "{{ time_down_late_non_workday if is_tomorrow_off else time_down_late if is_tomorrow_on else time_down_late_non_workday if is_today_off else time_down_late }}"
  position_nighttime: "{{ position_ventilation_night_time if is_contact_sensor_open else position_closed}}"
  shading_position: "{{ position_shade }}"

  # Conditions
  brighness_up_condition: '{{ is_brightness_enabled and is_default_brightness_sensor_defined and (states(default_brightness_sensor) | float(default=brightness_up) > brightness_up) }}'
  brighness_down_condition: '{{ is_brightness_enabled and is_default_brightness_sensor_defined and (states(default_brightness_sensor) | float(default=brightness_down) < brightness_down) }}'
  sun_azimuth_is_in_range_condition: >-
    {{
      state_attr(default_sun_sensor, 'azimuth') | float(default=shading_azimuth_start) > shading_azimuth_start and
      state_attr(default_sun_sensor, 'azimuth') | float(default=shading_azimuth_end) < shading_azimuth_end
    }}
  sun_elevation_is_in_range_condition: >-
    {{
      state_attr(default_sun_sensor, 'elevation') | float(default=shading_elevation_min) > shading_elevation_min and
      state_attr(default_sun_sensor, 'elevation') | float(default=shading_elevation_max) < shading_elevation_max
    }}
  lockout_protection_when_closing_condition: "{{ is_contact_sensor_defined and not is_contact_sensor_open if lockout_protection_when_closing else True }}"
  lockout_protection_when_shading_starts_condition: "{{ is_contact_sensor_defined and not is_contact_sensor_open if lockout_protection_when_shading_starts  else True }}"
  shading_weather_forecast_condition: "{{ shading_forecast_sensor == none or shading_forecast_sensor == [] or states(shading_forecast_sensor) in shading_weather_conditions }}"
  shading_start_condition: "{{ is_shading_brightness_sensor_defined and states(light_sensor) | float(default=shading_sun_brightness_start) > shading_sun_brightness_start }}"
  shading_start_cloudy_condition: "{{ is_shading_brightness_sensor_defined and states(light_sensor) | float(default=shading_sun_brightness_start_cloudy) > shading_sun_brightness_start_cloudy }}"
  shading_end_condition: "{{ is_shading_brightness_sensor_defined and states(light_sensor) | float(default=shading_sun_brightness_end) < shading_sun_brightness_end }}"
  shading_end_with_brightness_condition: "{{ is_shading_brightness_sensor_defined and states(light_sensor) | float(default=shading_sun_brightness_end) < shading_sun_brightness_end }}"

condition:
  - condition: state
    entity_id: !input is_enabled_input
    state: "on"
actions:
  - variables:
      cover_move_action: &id001
        sequence:
          - repeat:
              for_each: "{{ cover_entities | list }}"
              sequence:
                - choose:
                    - conditions:
                        # - '{{ not prevent_default_cover_actions }}'
                        - "{{ target_position | default(101)  == 0 }}"
                      sequence:
                        - alias: Close Cover
                          action: cover.close_cover
                          target:
                            entity_id: "{{ repeat.item if repeat is defined else '' }}"
                    - conditions:
                        # - '{{ not prevent_default_cover_actions }}'
                        - "{{ target_position | default(101) == 100 }}"
                      sequence:
                        - alias: Open Cover
                          action: cover.open_cover
                          target:
                            entity_id: "{{ repeat.item if repeat is defined else '' }}"
                    - conditions:
                        # - '{{ not prevent_default_cover_actions }}'
                        - "{{ target_position | default(101) not in [0, 100] }}"
                      sequence:
                        - alias: Moving the cover to target position
                          action: cover.set_cover_position
                          data:
                            position: "{{ target_position | default(101) }}"
                          target:
                            entity_id: "{{ repeat.item if repeat is defined else '' }}"
                - delay:
                    seconds: "{{ (range(1, 3) | random | int) }}"
  - choose:
      - alias: "Close for the night"
        conditions:
          - and:
            - "{{ is_down_enabled }}"
            - "{{ lockout_protection_when_closing_condition }}"
            - or:
              - and:
                - '{{ is_brightness_enabled }}'
                - '{{ is_default_brightness_sensor_defined }}'
                - "{{ now() >= today_at(time_down_early_today) }}"
                - '{{ brighness_down_condition }}'
              - "{{ now() >= today_at(time_down_late_today) }}"
              - alias: "After sunset"
                condition: state
                entity_id: sun.sun
                state: below_horizon
        sequence:
          - variables:
              target_position: "{{ position_ventilation_night_time if is_contact_sensor_open else position_closed }}"
          - *id001 # cover_move_action

      - alias: "Daytime shading"
        conditions:
          - alias: "Shading enabled"
            condition: template
            value_template: "{{ is_shading_enabled }}"
          - alias: "Sun is up"
            condition: sun
            before: sunset
            after: sunrise
          - alias: "Before time_down_early_today"
            condition: template
            value_template: "{{ now() < today_at(time_down_early_today) }}"
          - alias: "Sun azimuth in range"
            condition: template
            value_template: "{{ sun_azimuth_is_in_range_condition }}"
          - alias: "Sun elevation in range"
            condition: template
            value_template: "{{ sun_elevation_is_in_range_condition }}"
        sequence:
          choose:
            - alias: Light Sensor configured
              conditions:
                - "{{ is_shading_brightness_sensor_defined }}"
              sequence:
                choose:
                  - alias: Cloudy or bad weather
                    conditions:
                      # https://openweathermap.org/weather-conditions
                      # More than 50% clouds or bad weather
                      - condition: numeric_state
                        entity_id: sensor.home_weather_code
                        above: 803
                        below: 804
                      - "{{ lockout_protection_when_shading_starts_condition }}"
                      - "{{ sun_azimuth_is_in_range_condition }}"
                      - "{{ sun_elevation_is_in_range_condition }}"
                      - "{{ shading_start_cloudy_condition }}"
                      - "{{ shading_weather_forecast_condition }}"
                    sequence:
                      - variables:
                          target_position: !input position_shade_light
                      - *id001 # cover_move_action
                  - alias: Sunny
                    conditions:
                      # https://openweathermap.org/weather-conditions
                      # Clear, max broken clouds
                      - condition: numeric_state
                        entity_id: sensor.home_weather_code
                        above: 799
                        below: 804
                      - "{{ lockout_protection_when_shading_starts_condition }}"
                      - "{{ sun_azimuth_is_in_range_condition }}"
                      - "{{ sun_elevation_is_in_range_condition }}"
                      - "{{ shading_start_condition }}"
                      - "{{ shading_weather_forecast_condition }}"
                    sequence:
                      choose:
                        - alias: "Shade light"
                          conditions:
                            - "{{ is_temperature_sensor_available }}"
                            - "{{ states(temperature_sensor) | int > int(states('input_number.autoshade_lower_bound')) }}"
                            - "{{ states(temperature_sensor) | int < int(states('input_number.autoshade_medium_upper_bound')) }}"
                          sequence:
                            - variables:
                                target_position: !input position_shade_light
                            - *id001 # cover_move_action
                      default:
                        alias: "Shade"
                        sequence:
                          - variables:
                              target_position: !input position_shade
                          - *id001 # cover_move_action
                  - alias: "Lift shading"
                    conditions:
                      - "{{ is_shading_enabled }}"
                      - "{{ shading_end_condition }}"
                    sequence:
                      - variables:
                          target_position: '{{ position_open }}'
                      - *id001 # cover_move_action
            - alias: "No light sensor (follow Azimuth)"
              conditions:
                - "{{ lockout_protection_when_shading_starts_condition }}"
                - "{{ sun_azimuth_is_in_range_condition }}"
                - "{{ sun_elevation_is_in_range_condition }}"
                - "{{ shading_weather_forecast_condition }}"
              sequence:
                - variables:
                    target_position: "{{ shading_position }}"
                - *id001

      - alias: "Lift shading"
        conditions:
          - "{{ is_shading_enabled }}"
          - "{{ trigger.id | regex_match('^(t_shading_end_pending)') }}"
          - "{{ now() >= today_at(time_up_late_today) }}"
          - "{{ now() <= today_at(time_down_late_today) - timedelta(seconds = 5) }}"
        sequence:
          - variables:
              target_position: "{{ position_open }}"
          - *id001 # cover_move_action

      - alias: "Ventilation"
        conditions:
          - condition: trigger
            id: tid_contact_opened_on
          - "{{ is_ventilation_enabled }}"
          - "{{ state_attr(cover_entity, 'current_position') | int < position_ventilation }}"
        sequence:
          - variables:
              target_position: !input position_ventilation
          - *id001 # cover_move_action

      - alias: "Daytime opening"
        conditions:
          - and:
            - "{{ is_up_enabled }}"
            - or:
              - and:
                - '{{ is_brightness_enabled }}'
                - '{{ is_default_brightness_sensor_defined }}'
                - '{{ brighness_up_condition }}'
                - "{{ now() >= today_at(time_up_early_today) }}"
                - "{{ now() < today_at(time_down_early_today) - timedelta(seconds = 5) }}"
              - and:
                - "{{ now() >= today_at(time_up_late_today) }}"
                - "{{ now() < today_at(time_down_early_today) - timedelta(seconds = 5) }}"
            - alias: "After sunrise"
              condition: state
              entity_id: sun.sun
              state: above_horizon
        sequence:
          - variables:
              target_position: "{{ position_open }}"
          - *id001 # cover_move_action
mode: single
